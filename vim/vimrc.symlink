" as I get more comfortable, maybe experiment more with https://github.com/amix/vimrc
" vim: fdm=marker ts=2 sts=2 sw=2 noet

" General {{{
" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

" :W sudo saves the file
" (useful for handling the permission-denied error)
command W w !sudo tee % > /dev/null
" }}}

" VIM UI {{{
" Turn on the Wild menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
	set wildignore+=.git\*,.hg\*,.svn\*
else
	set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

" Use modelines
set modeline

" Always show current position
set ruler

" A buffer becomes hidden when it is abandoned
set hidden

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" Don't redraw while executing macros (good performance config)
set lazyredraw

" Show (partial) commands
set showcmd

" Show matching brackets when text indicator is over them
set showmatch
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1

" Show line numbers
set number
set relativenumber

" Underline the current line
set cursorline
"highlight CursorLine cterm=standout ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE

" Toggle current line highlight
nnoremap <leader>h :set cursorline!<CR>

" Draw a vertical line at a given column
set cc=
call matchadd('ColorColumn', '\%80v')
highlight ColorColumn ctermbg=Magenta guibg=lightgrey
" }}}

" Colours and Fonts {{{
" Enable syntax highlighting
syntax enable

set background=dark

" Use Unix default file type
set ffs=unix,dos,mac

" }}}

" Files, backups and undo {{{

" strip trialing whitespace from these files
autocmd FileType c,cpp,java,python autocmd BufWritePre <buffer> %s/\s\+$//e

" }}}

" Text, tab and indent related {{{

" Use tabs instead of spaces
set noexpandtab

" Be smart when using tabs ;)
set smarttab

" Compact tabs
set shiftwidth=0 " uses the value of tabstop
set softtabstop=-1 " uses the value of shiftwidth
set tabstop=2 " set this one and the others will follow

set autoindent
set smartindent

" Show whitespace characters
" set list
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:·

" }}}

" Visual mode related {{{

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :<C-u>call VisualSelection('', '')<CR>/<C-R>=@/<CR><CR>
vnoremap <silent> # :<C-u>call VisualSelection('', '')<CR>?<C-R>=@/<CR><CR>

" }}}

" Moving around, tabs, windows and buffers {{{

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" }}}

" Spell checking {{{

" Pressing ,ss will toggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

" }}}

" Functions {{{

command! Date :normal a<C-R>=strftime('%F')<CR>
command! Timestamp :normal a<C-R>=strftime('%F %T')<CR>

" }}}

" Plugins {{{

" only do the following if .vim/plugged exists
if !empty(glob('~/.vim/autoload/plug.vim'))

	" Specify a directory for plugins
	" - For Neovim: stdpath('data') . '/plugged'
	" - Avoid using standard Vim directory names like 'plugin'
	call plug#begin('~/.vim/plugged')

	" Must use single quotes
	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-repeat'
	Plug 'tpope/vim-sensible'
	Plug 'tpope/vim-surround'
	Plug 'vim-airline/vim-airline'
	Plug 'editorconfig/editorconfig-vim'

	call plug#end()

endif

" }}}

